/*
 * Copyright (C) 2013 Man YUAN <epsilon@epsilony.net>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.epsilony.mf.process.integrate.tool;

import java.util.Arrays;

/**
 * @author epsilon AT epsilony.net
 * 
 */
public class SymmetricTriangleQuadratureDatas {
    public final static int MAX_ALGEBRAIC_ACCURACY = 8;
    public final static int MIN_ALGEBRAIC_ACCURACY = 1;
    private final static double[][] weights = new double[][] {
            { 1 },
            { 1 / 3d, 1 / 3d, 1 / 3d },
            { -27 / 48d, 25 / 48d, 25 / 48d, 25 / 48d },
            { 0.109951743655322, 0.109951743655322, 0.109951743655322, 0.223381589678011, 0.223381589678011,
                    0.223381589678011 },
            { 0.225000000000000, 0.125939180544827, 0.125939180544827, 0.125939180544827, 0.132394152788506,
                    0.132394152788506, 0.132394152788506 },
            { 0.050844906370207, 0.050844906370207, 0.050844906370207, 0.116786275726379, 0.116786275726379,
                    0.116786275726379, 0.082851075618374, 0.082851075618374, 0.082851075618374, 0.082851075618374,
                    0.082851075618374, 0.082851075618374 },
            { -0.149570044467682, 0.175615257433208, 0.175615257433208, 0.175615257433208, 0.053347235608838,
                    0.053347235608838, 0.053347235608838, 0.077113760890257, 0.077113760890257, 0.077113760890257,
                    0.077113760890257, 0.077113760890257, 0.077113760890257 },
            { 0.144315607677787, 0.095091634267285, 0.095091634267285, 0.095091634267285, 0.103217370534718,
                    0.103217370534718, 0.103217370534718, 0.032458497623198, 0.032458497623198, 0.032458497623198,
                    0.027230314174435, 0.027230314174435, 0.027230314174435, 0.027230314174435, 0.027230314174435,
                    0.027230314174435 }, };
    private final static double[][][] barycentricCoordinatess = new double[][][] {
            { { 1 / 3d, 1 / 3d, 1 / 3d } },
            { { 2 / 3d, 1 / 6d, 1 / 6d }, { 1 / 6d, 2 / 3d, 1 / 6d }, { 1 / 6d, 1 / 6d, 2 / 3d } },
            { { 1 / 3d, 1 / 3d, 1 / 3d }, { 0.6, 0.2, 0.2 }, { 0.2, 0.6, 0.2 }, { 0.2, 0.2, 0.6 } },
            { { 0.816847572980459, 0.091576213509771, 0.091576213509771 },
                    { 0.091576213509771, 0.816847572980459, 0.091576213509771 },
                    { 0.091576213509771, 0.091576213509771, 0.816847572980459 },
                    { 0.108103018168070, 0.445948490915965, 0.445948490915965 },
                    { 0.445948490915965, 0.108103018168070, 0.445948490915965 },
                    { 0.445948490915965, 0.445948490915965, 0.108103018168070 } },
            { { 1 / 3d, 1 / 3d, 1 / 3d }, { 0.797426985353087, 0.101286507323456, 0.101286507323456 },
                    { 0.101286507323456, 0.797426985353087, 0.101286507323456 },
                    { 0.101286507323456, 0.101286507323456, 0.797426985353087 },
                    { 0.059715871789770, 0.470142064105115, 0.470142064105115 },
                    { 0.470142064105115, 0.059715871789770, 0.470142064105115 },
                    { 0.470142064105115, 0.470142064105115, 0.059715871789770 } },
            { { 0.873821971016996, 0.063089014491502, 0.063089014491502 },
                    { 0.063089014491502, 0.873821971016996, 0.063089014491502 },
                    { 0.063089014491502, 0.063089014491502, 0.873821971016996 },
                    { 0.501426509658179, 0.249286745170910, 0.249286745170910 },
                    { 0.249286745170910, 0.501426509658179, 0.249286745170910 },
                    { 0.249286745170910, 0.249286745170910, 0.501426509658179 },
                    { 0.636502499121399, 0.310352451033784, 0.053145049844817 },
                    { 0.636502499121399, 0.053145049844817, 0.310352451033784 },
                    { 0.310352451033784, 0.636502499121399, 0.053145049844817 },
                    { 0.310352451033784, 0.053145049844817, 0.636502499121399 },
                    { 0.053145049844817, 0.636502499121399, 0.310352451033784 },
                    { 0.053145049844817, 0.310352451033784, 0.636502499121399 } },
            { { 1 / 3d, 1 / 3d, 1 / 3d }, { 0.479308067841920, 0.260345966079040, 0.260345966079040 },
                    { 0.260345966079040, 0.479308067841920, 0.260345966079040 },
                    { 0.260345966079040, 0.260345966079040, 0.479308067841920 },
                    { 0.869739794195568, 0.065130102902216, 0.065130102902216 },
                    { 0.065130102902216, 0.869739794195568, 0.065130102902216 },
                    { 0.065130102902216, 0.065130102902216, 0.869739794195568 },
                    { 0.638444188569810, 0.312865496004874, 0.048690315425316 },
                    { 0.638444188569810, 0.048690315425316, 0.312865496004874 },
                    { 0.312865496004874, 0.638444188569810, 0.048690315425316 },
                    { 0.312865496004874, 0.048690315425316, 0.638444188569810 },
                    { 0.048690315425316, 0.638444188569810, 0.312865496004874 },
                    { 0.048690315425316, 0.312865496004874, 0.638444188569810 } },
            { { 1 / 3d, 1 / 3d, 1 / 3d }, { 0.081414823414554, 0.459292588292723, 0.459292588292723 },
                    { 0.459292588292723, 0.081414823414554, 0.459292588292723 },
                    { 0.459292588292723, 0.459292588292723, 0.081414823414554 },
                    { 0.658861384496480, 0.170569307751760, 0.170569307751760 },
                    { 0.170569307751760, 0.658861384496480, 0.170569307751760 },
                    { 0.170569307751760, 0.170569307751760, 0.658861384496480 },
                    { 0.898905543365938, 0.050547228317031, 0.050547228317031 },
                    { 0.050547228317031, 0.898905543365938, 0.050547228317031 },
                    { 0.050547228317031, 0.050547228317031, 0.898905543365938 },
                    { 0.008394777409958, 0.263112829634638, 0.728492392955404 },
                    { 0.008394777409958, 0.728492392955404, 0.263112829634638 },
                    { 0.263112829634638, 0.008394777409958, 0.728492392955404 },
                    { 0.263112829634638, 0.728492392955404, 0.008394777409958 },
                    { 0.728492392955404, 0.008394777409958, 0.263112829634638 },
                    { 0.728492392955404, 0.263112829634638, 0.008394777409958 } } };

    /**
     * @param degree
     *            must in the closed range [{@link #MIN_ALGEBRAIC_ACCURACY},
     *            {@link #MAX_ALGEGRAIC_ACCURACY}]
     * @return
     */
    public static int numPoints(int degree) {
        return weights[degree - 1].length;
    }

    public static double[] weights(int degree) {
        return Arrays.copyOf(weights[degree - 1], numPoints(degree));
    }

    public static double[][] barycentricCoordinates(int degree) {
        return Arrays.copyOf(barycentricCoordinatess[degree - 1], barycentricCoordinatess[degree - 1].length);
    }

    public static double[] cartesianCoordinate(double[][] triangleVertes, double[] barycentricCoordinate) {
        double[] result = new double[2];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < result.length; j++) {
                result[j] += barycentricCoordinate[i] * triangleVertes[i][j];
            }
        }
        return result;
    }

    public static void checkQuadratureDegree(int degree) {
        if (degree < MIN_ALGEBRAIC_ACCURACY || degree > MAX_ALGEBRAIC_ACCURACY) {
            throw new IllegalArgumentException();
        }
    }
}
